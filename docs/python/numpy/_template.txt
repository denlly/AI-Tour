{% import tornado %}
{% set space = '    ' %}
{{ data.title }}
===================

::
    {{tornado.escape.xhtml_unescape(data.method)}}

summary
-------------

    {{tornado.escape.xhtml_unescape(data.summary) }}

Parameters
----------------

{% for param in data.params %}
-  **{{ param.name }}** : {{ param.type }}
    {{ param.desc }}  {{ param.notice }}
{% end %}

return 
-----------
{% for param in data.returns %}
-  **{{ param.name }}** : {{ param.type }}
    {{ param.desc }}
{% end %}
note
----------

    当顺序为'A'且对象是既不是'C'也不是'F'顺序的数组，并且副本是由dtype的变化强制的，那么结果的顺序不一定是'C'，如预期的那样。这可能是一个错误。


examples
-----------

::

    >>> np.array([1, 2, 3])
    array([1, 2, 3])

Upcasting:

::
    >>> np.array([1, 2, 3.0])
    array([ 1.,  2.,  3.])


More than one dimension:

::

    >>> np.array([[1, 2], [3, 4]])
    array([[1, 2], [3, 4]])

Minimum dimensions 2:

::
    >>> np.array([1, 2, 3], ndmin=2)
    array([[1, 2, 3]])

Type provided:

::

    >>> np.array([1, 2, 3], dtype=complex)
    array([ 1.+0.j,  2.+0.j,  3.+0.j])

Data-type consisting of more than one element:

::
    >>> x = np.array([(1,2),(3,4)],dtype=[('a','<i4'),('b','<i4')])
    >>> x['a']
    array([1, 3])

Creating an array from sub-classes:

::
    >>> np.array(np.mat('1 2; 3 4'))
    array([[1, 2],
        [3, 4]])

::
    >>> np.array(np.mat('1 2; 3 4'), subok=True)
    matrix([[1, 2],
            [3, 4]])

see others
-------------
{% for see in data.seealsos %}
-  *{{ see.title }}* : {{ see.desc }}
{% end %}